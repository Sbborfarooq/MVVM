
What is an Interface?

An interface in programming is a contract that defines a set of methods that a class must implement.
It's like a blueprint with no implementation details - just method signatures that implementing classes must provide.
🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎
// Define an interface
interface Animal {
    fun makeSound()
    fun move()
}

// Implement the interface in a class
class Dog : Animal {
    // Must override and implement all methods from Animal
    override fun makeSound() {
        println("Woof!")
    }

    override fun move() {
        println("Running on four legs")
    }
}

🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎
/////////////////////////////Interface in Lifecycle Components////////////////////////////////
// The DefaultLifecycleObserver interface defines these methods
interface DefaultLifecycleObserver {
    fun onCreate(owner: LifecycleOwner) {}
    fun onStart(owner: LifecycleOwner) {}
    fun onResume(owner: LifecycleOwner) {}
    fun onPause(owner: LifecycleOwner) {}
    fun onStop(owner: LifecycleOwner) {}
    fun onDestroy(owner: LifecycleOwner) {}
}
🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎
// Your observer class must implement all methods
class MyObserver : DefaultLifecycleObserver {
    // Override at least one method (others have default empty implementations)//key concept
    override fun onResume(owner: LifecycleOwner) {
        println("Activity resumed")
    }
}

🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎🍎
Key Distinctions for DefaultLifecycleObserver

It's a special interface with default method implementations
This means implementing classes only need to override methods they care about
This makes it more convenient than traditional interfaces where all methods must be implemented
It's part of the Android Jetpack architecture components for MVVM

Benefits in MVVM Architecture

In MVVM, lifecycle-aware components help:
Separate concerns (UI logic vs business logic)
Make ViewModels aware of lifecycle changes without tight coupling
Prevent memory leaks by properly handling lifecycle events
Make code more testable and maintainable

